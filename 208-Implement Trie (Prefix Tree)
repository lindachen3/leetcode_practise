public class Trie {
    public class TrieNode{
        TrieNode[] children = new TrieNode[26];
        boolean isWord=false;
    }
    TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode node = root;
        for(char c:word.toCharArray()){
            if(node.children[c-'a']==null){
                node.children[c-'a']=new TrieNode();
            }
            node = node.children[c-'a'];
        }
        node.isWord=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        return match(word.toCharArray(),0,root);
    }
    
    private boolean match(char[] chs, int k, TrieNode node){
        if(k==chs.length) return node.isWord;
        if(node.children[chs[k]-'a']!=null){
            return match(chs, k+1,node.children[chs[k]-'a']);
        }
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        return match2(prefix.toCharArray(), 0, root);
    }
    
    private boolean match2(char[] chs, int k, TrieNode node){
        if(k==chs.length) return true;
        if(node.children[chs[k]-'a']!=null){
            return match2(chs, k+1, node.children[chs[k]-'a']);
        }
        
        return false;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
