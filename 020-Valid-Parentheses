public class Solution {
    public class Bracket{
        char type;
        int position;
        
        Bracket(char type, int position){
            this.type = type;
            this.position = position;
        }
        
        boolean isMatch(char c){
            if(this.type == '(' && c == ')'){
                return true;
            }
            if(this.type == '{' && c == '}'){
                return true;
            }
            if(this.type == '[' && c == ']'){
                return true;
            }
            return false;
        }
    }
    public boolean isValid(String s) {
        Stack<Bracket> bracket_stack = new Stack<Bracket>(); 
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(c== '(' || c=='{' || c=='['){  //注意，或是“||”，不是“|”
                bracket_stack.push(new Bracket(c, i));
            }
            if(c==')' || c=='}' || c==']'){
                if(bracket_stack.isEmpty())
                    return false;
                if(!bracket_stack.pop().isMatch(c)) //注意，判断false不要用==false，显得不专业
                    return false;
            }
        }
        if(bracket_stack.isEmpty()){
            return true;
        }
        return false;
    }
}

//Approach 2

public class Solution {
    public boolean isValid(String s) {
        char[] str = s.toCharArray();
        Stack<Character> mystack = new Stack<Character>();
        for(int i=0; i<str.length; i++){
            char ch=str[i];
            if(ch=='(' || ch=='{' || ch=='[')
                mystack.push(str[i]);
            else if(ch==')' || ch=='}' || ch==']'){
                if(mystack.empty()) return false;
                if(!mystack.empty()){
                    char ch2=mystack.pop();
                    if(ch==')' && ch2!='('){
                        return false;
                    } else  if(ch=='}' && ch2!='{'){
                        return false;
                    } else if(ch==']' && ch2!='['){
                        return false;
                    } 
                }
            }
        }
        if(!mystack.empty()) return false;
        return true;
    }
}

//Approach 3

public boolean isValid(String s) {
	Stack<Character> stack = new Stack<Character>();
	for (char c : s.toCharArray()) {
		if (c == '(')
			stack.push(')');
		else if (c == '{')
			stack.push('}');
		else if (c == '[')
			stack.push(']');
		else if (stack.isEmpty() || stack.pop() != c)
			return false;
	}
	return stack.isEmpty();
}
