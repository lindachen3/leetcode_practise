//Approach 1
public class Solution {
    public int[] plusOne(int[] digits) {
        int len = digits.length;
        int c = 1;
        
        int quotient = (digits[len-1]+c)/10;
        int reminder = (digits[len-1]+c)%10;
        
        boolean if9 = true;
        for(int j=0; j<=len-1; j++){
            if(digits[j]!=9){
                if9=false;
                break;
            }
        }
        
        int[] newnum = new int[len+1];
        if(if9==true){
            newnum[0]=1;
            for(int k=1; k<=len; k++){
                newnum[k]=0;
            }    
            return newnum;
        }
            
        if(if9==false){    
            digits[len-1]=reminder;   //注意这个语句的位置
            for(int i=len-2; i>=0; i--){
            
            //注意下面两个语句的位置
                reminder = (digits[i]+quotient)%10;
                quotient = (digits[i]+quotient)/10;
                if(quotient==1){
                    digits[i]=reminder;
                    continue;
                }else{
                    digits[i]=reminder;
                    break;
                }
            }
        }
        return digits;
    }
}

// 2nd Round

public class Solution {
    public int[] plusOne(int[] digits) {
        int up=1;
        for(int i=digits.length-1; i>=0; i--){
            int total = digits[i]+up;
            up = total/10;
            digits[i]=total%10;
            if(up==0){
                continue;
            }else{
                if(i==0 && up>0){
                    int[] ans = new int[digits.length+1];
                    ans[0]=1;
                    for(int j=1; j<ans.length; j++){
                        ans[j]=digits[j-1];
                    }
                    return ans;
                }
            }
        }
    
        return digits;
    }
}
