public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix==null||matrix.length==0||matrix[0].length==0||target<matrix[0][0]) return false;
        int low=0, high=matrix.length-1;
        int mid=low+(high-low)/2;
        
        while(low<=high){
            mid=low+(high-low)/2;
            if(target>=matrix[mid][0]){
                if(mid==matrix.length-1 || target<matrix[mid+1][0])
                    break;
                else
                    low=mid+1;
            }else{
                if(mid==0||target>=matrix[mid-1][0]){
                    mid--;
                    break;
                }else
                    high=mid-1;
            }
        }
        
        int left=0, right=matrix[0].length-1;
        while(left<=right){
            int m=left+(right-left)/2;
            if(matrix[mid][m]==target){
                return true;
            }else if(matrix[mid][m]>target){
                if(m==left)
                    return false;
                right=m-1;
            }else{
                if(m==right)
                    return false;
                left=m+1;
            }
        }
        return false;
    }
}
/*
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix==null||matrix.length==0||matrix[0].length==0) return false;
        int row = matrix.length, col = matrix[0].length;
        int begin=0, end=row*col-1;
        while(begin<=end){
            int mid=(begin+end)/2;
            int mid_val=matrix[mid/col][mid%col];
            if(mid_val==target){
                return true;
            }else if(mid_val<target){
                begin=mid+1;
            }else{
                end=mid-1;
            }
        }
        return false;
    }
}*/
