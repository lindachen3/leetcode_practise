public class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashSet<Character> mytable = new HashSet<Character>();
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board.length; j++){
                if(board[i][j]=='.'){
                    continue;
                }
                if(board[i][j]>'9' || board[i][j]<'0') return false;
                if(mytable.contains(board[i][j])){
                    return false;
                }else{
                    mytable.add(board[i][j]);
                }
            }
            mytable.clear();
        }
        for(int j=0; j<board.length; j++){
            for(int i=0; i<board.length; i++){
                if(board[i][j]=='.'){
                    continue;
                }
                if(board[i][j]>'9' || board[i][j]<'0') return false;
                if(mytable.contains(board[i][j])){
                    return false;
                }else{
                    mytable.add(board[i][j]);
                }
            }
            mytable.clear();
        }
        for(int i=0; i<board.length/3; i++){
            for(int j=0; j<board.length/3; j++){
                for(int k=0; k<3; k++){
                    for(int l=0; l<3; l++){
                        if(board[i*3+k][j*3+l]=='.'){
                            continue;
                        }
                        if(board[i*3+k][j*3+l]>'9' || board[i*3+k][j*3+l]<'0') return false;
                        if(mytable.contains(board[i*3+k][j*3+l])){
                            return false;
                        }else{
                            mytable.add(board[i*3+k][j*3+l]);
                        }
                    }
                }
                mytable.clear();
            }
            
        }
        return true;
    }
}
