public class Solution {
    public int maxSubArray(int[] nums) {
        int n=nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        int max=dp[0];
        
        for(int i=1; i<n; i++){
            dp[i]=nums[i]+(dp[i-1]>0?dp[i-1]:0);
            max = Math.max(max,dp[i]);
        }
        return max;
    }
}

//Approach 2
public class Solution {
    public int maxSubArray(int[] nums) {
        int maxsofar=nums[0],maxendhere=nums[0];
        for(int i=1; i<nums.length; i++){
            maxendhere=Math.max(nums[i], maxendhere+nums[i]);
            maxsofar=Math.max(maxsofar, maxendhere);
        }
        return maxsofar;
    }
}

    public int maxSubArray(int[] nums) {
        int sum = 0, smax = Integer.MIN_VALUE;
        for (int num : nums) {
            sum += num;
            if (sum > smax) smax = sum;
            if (sum < 0) sum = 0;
        }
        return smax;
    }
