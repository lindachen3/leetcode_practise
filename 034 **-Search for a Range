
public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res={-1,-1};
        if(nums==null||nums.length==0)
            return res;
        int lleft=0, lright=nums.length-1;
        int hleft=0, hright=nums.length-1;
        while(lleft<=lright){
            int lmid=lleft+(lright-lleft)/2;
            if(nums[lmid]<target){
                lleft=lmid+1;
            }else{
                lright=lmid-1;
            }
        }
        while(hleft<=hright){
            int hmid=hleft+(hright-hleft)/2;
            if(nums[hmid]>target){
                hright=hmid-1;
            }else{
                hleft=hmid+1;
            }
        }
        if(lleft<=hright){
            res[0]=lleft;
            res[1]=hright;
        }
        return res;
    }
}

//2nd round
public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int lst=0,lend=nums.length-1;
        int rst=0,rend=nums.length-1;
        int[] res = new int[2];
        while(lst<=lend){
            int mid=lst+(lend-lst)/2;
            if(nums[mid]>=target){
                lend=mid-1;
            }else if(nums[mid]<target){
                lst=mid+1;
            }
        }
        res[0]=lst;
        while(rst<=rend){
            int mid=rst+(rend-rst)/2;
            if(nums[mid]>target){
                rend=mid-1;
            }else if(nums[mid]<=target){
                rst=mid+1;
            }
        }
        res[1]=rend;
        if(lst>rend){
            res[0]=-1;
            res[1]=-1;
        }
        return res;
    }
}

//Approach 3
public int[] searchRange(int[] nums, int target) {
    if(nums == null || nums.length == 0){
        return null;
    }
 
    int[] arr= new int[2];
    arr[0]=-1;
    arr[1]=-1;
 
    binarySearch(nums, 0, nums.length-1, target, arr);
 
    return arr;
}
 
public void binarySearch(int[] nums, int left, int right, int target, int[] arr){
    if(right<left) 
        return;
 
    if(nums[left]==nums[right] && nums[left]==target){
        arr[0]=left;
        arr[1]=right;
        return;
    }
 
    int mid = left+(right-left)/2;
 
 
    if(nums[mid]<target){
        binarySearch(nums, mid+1, right, target, arr);
    }else if(nums[mid]>target){
        binarySearch(nums, left, mid-1, target, arr);
    }else{
        arr[0]=mid;
        arr[1]=mid;
 
        //handle duplicates - left
        int t1 = mid;
        while(t1 >left && nums[t1]==nums[t1-1]){
            t1--;
            arr[0]=t1;
        }
 
        //handle duplicates - right
        int t2 = mid;
        while(t2 < right&& nums[t2]==nums[t2+1]){
            t2++;
            arr[1]=t2;
        }
        return;
    }
}
