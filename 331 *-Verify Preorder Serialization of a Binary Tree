Approach 1:
这个方法简单的说就是不断的砍掉叶子节点。最后看看能不能全部砍掉。
已例子一为例，：”9,3,4,#,#,1,#,#,2,#,6,#,#” 遇到x # #的时候，就把它变为 #
我模拟一遍过程：
9,3,4,#,# => 9,3,# 继续读
9,3,#,1,#,# => 9,3,#,# => 9,# 继续读
9,#2,#,6,#,# => 9,#,2,#,# => 9,#,# => #
合法的情况最后一定是一个#

public class Solution {
    public boolean isValidSerialization(String preorder) {
        if (preorder==null)  return false;
        Stack<String> s = new Stack<>();
        String[] str = preorder.split(",");
        for(int i=0; i<str.length; i++){
            String temp=str[i];
            while(temp.equals("#") && !s.isEmpty() && s.peek().equals(temp)){
                s.pop();
                if(s.isEmpty()){
                    return false;
                }
                s.pop();
            }
            s.push(temp);
        }
        return s.size()==1 && s.peek().equals("#");
    }
}

Approach 2
对于二叉树，我们把空的地方也作为叶子节点（如题目中的#），那么有
所有的非空节点提供2个出度和1个入度（根除外）
所有的空节点但提供0个出度和1个入度
我们在遍历的时候，计算diff = outdegree – indegree. 当一个节点出现的时候，diff – 1，因为它提供一个入度；当节点不是#的时候，diff+2(提供两个出度) 如果序列式合法的，那么遍历过程中diff >=0 且最后结果为0.

    public boolean isValidSerialization(String preorder) {
        int diff=1;
        String[] str = preorder.split(",");
        for(String node:str){
            if(--diff<0) return false;
            if(!node.equals("#")) diff+=2;
        }
        return diff==0;
    }
