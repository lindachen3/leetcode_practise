/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null){
            return true;
        }
        ListNode middle = findMiddle(head);
        middle.next = reverse(middle.next);
        
        ListNode p1 = head, p2 = middle.next;
        while(p1 != null && p2 !=null && p1.val==p2.val){
            p1 = p1.next;
            p2 = p2.next;
        }
        return p2==null;
    }
    
    public ListNode reverse(ListNode head){
        ListNode prev = null;
        while(head!=null){
            ListNode temp = head.next;
            head.next =prev;
            prev = head;
            head = temp;
        }
        return prev;
    }
    
    public ListNode findMiddle(ListNode head){
        if(head == null){
            return null;
        }
        ListNode slow = head, fast = head.next;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}

//2nd round
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return true;
        }

        ListNode slow=head;
        ListNode fast=slow.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode start=slow.next;
        ListNode newlink=reverse(start);
        ListNode origlink=head;
        
        while(newlink!=null){
            if(newlink.val!=origlink.val){
                return false;
            }
            newlink=newlink.next;
            origlink=origlink.next;
        }
        return true;
    }
    public ListNode reverse(ListNode node){
        ListNode prev=null;
        while(node!=null){
            ListNode temp=node.next;
            node.next=prev;
            prev=node;
            node=temp;
        }
        return prev;
    }
}
