/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size()<=1) return intervals;
        
        Collections.sort(intervals,new Comparator<Interval>() {
           public int compare(Interval i1, Interval i2) {
                return i1.start - i2.start;       
           } 
        });
        
        int start=intervals.get(0).start;
        int end=intervals.get(0).end;
        
        List<Interval> ans = new LinkedList<Interval>();
        
        for(Interval inter:intervals){
            if(inter.start<=end){
                end=Math.max(end, inter.end);
            }else{
                ans.add(new Interval(start, end));
                start=inter.start;
                end=inter.end;
            }
        }
        ans.add(new Interval(start, end));
        return ans;
    }
}
