public class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        Set<String> s = new HashSet<>(); 
        for(String w:wordList){
            s.add(w);
        }
        for(int i=1; !q.isEmpty(); i++){
            for(int size=q.size(); size>0; size--){  //就是执行size次啊，因为不是size-1
                String w=q.poll();
                if(w.equals(endWord)) return i;  //列出所有可能，一有匹配就退出，所以后面其他的就不管了
                for(int j=0; j<w.length(); j++){
                    char[] c=w.toCharArray();
                    for(char k='a'; k<='z'; k++){
                        c[j]=k;
                        String next=new String(c);
                        if(s.contains(next)){
                            q.offer(next);
                            s.remove(next);
                        }  
                    }
                }
            }
        }
        return 0;
    }
}

//2nd round
public class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        HashSet<String> hs = new HashSet<>();
        for(String s:wordList){
            hs.add(s);
        }
        if(!hs.contains(endWord))
            return 0;
        Queue<String> myset = new LinkedList<>();
        myset.offer(beginWord);
        
        HashSet<String> visited = new HashSet<>();
        visited.add(beginWord);
        
        int len=1;
        while(!myset.isEmpty()){
            int size=myset.size();
            for(int i=0; i<size; i++){
                String str=myset.poll();
                
                for(int j=0; j<str.length(); j++){
                    for(char c='a'; c<='z'; c++){
                        StringBuilder sb = new StringBuilder(str);
                        sb.setCharAt(j,c);
                        String str2=sb.toString();
                        if(str2.equals(endWord))
                            return len+1;
                        if(!visited.contains(str2) && hs.contains(str2)){
                            myset.offer(str2);
                            visited.add(str2);
                        }
                    }
                }
            }
            len++;
        }
        return 0;
    }
}
