/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp = new ListNode(0);
        temp.next = head;
        ListNode pt = temp;
        ListNode pt2 = temp;
        int i=0;
        //int j=0;
        if(head==null){
            return temp.next;
        }
        while(pt.next!=null){
            pt=pt.next;
            i++;
            /*if(i==1 && n==1){
                temp.next = temp.next.next;
                break;
            }*/
            if(i==n){
                break;
            }
        }
        while(pt.next!=null){
            //i++;
            //j++;
            pt=pt.next;
            pt2=pt2.next;
            //if(pt.next==null){
                
            //}
        }
        
        pt2.next=pt2.next.next;  //不能放在while循环里，因为while循环可能本来就不用执行
        
        return temp.next;
    }
}


public ListNode removeNthFromEnd(ListNode head, int n) {
    
    ListNode start = new ListNode(0);
    ListNode slow = start, fast = start;
    slow.next = head;
    
    //Move fast in front so that the gap between slow and fast becomes n
    for(int i=1; i<=n+1; i++)   {
        fast = fast.next;
    }
    //Move fast to the end, maintaining the gap
    while(fast != null) {
        slow = slow.next;
        fast = fast.next;
    }
    //Skip the desired node
    slow.next = slow.next.next;
    return start.next;
}
