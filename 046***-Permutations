递归：深度优先
迭代：广度优先

/*
public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int len = nums.length;
        if(len==0) return result;
        getpermute(nums,0,result,new ArrayList<Integer>());
        return result;
    }
    public void getpermute(int[] nums, int start, List<List<Integer>> Permutations, List<Integer> Permutation){
        if(Permutation.size()==nums.length){
            Permutations.add(Permutation);
            return;
        }
        for(int i=0; i<=Permutation.size(); i++){
            List<Integer> newPermutation = new ArrayList<Integer>(Permutation);
            newPermutation.add(i,nums[start]);
            getpermute(nums,start+1,Permutations, newPermutation);
        }
    }
}
*/

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(nums.length==0)   return result;
        List<Integer> permutation = new ArrayList<Integer>();
        permutation.add(nums[0]);
        result.add(permutation);
        
        for(int i=1; i<nums.length;i++){
            List<List<Integer>> temp = new ArrayList<List<Integer>>();
            for(int j=0; j<=i; j++){
                for(List<Integer> tp:result){
                    List<Integer> t = new ArrayList<Integer>(tp);
                    t.add(j,nums[i]);
                    temp.add(t);
                }
            }
            result=temp;
        }
        return result;
    }
}
