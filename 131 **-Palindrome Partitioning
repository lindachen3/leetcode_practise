public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<List<String>>();
        helper(s, ans, new ArrayList<String>(),0);
        return ans;
    }
    public void helper(String s, List<List<String>> ans, List<String> templist, int start) {
        if(start == s.length()){
            ans.add(new ArrayList<String>(templist));
        }
        else{
            for(int i=start; i<s.length(); i++){
                if(ispalindrome(s, start, i)){
                    templist.add(s.substring(start, i+1));
                    helper(s, ans, templist, i+1);
                    templist.remove(templist.size()-1);
                } 
            }
        }
    }
    public boolean ispalindrome(String s, int low, int high){
        while(low<high){
            if(s.charAt(low++)!=s.charAt(high--)) return false;
        }
        return true;
    }
}
