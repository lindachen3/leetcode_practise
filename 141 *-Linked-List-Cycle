/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 // 原来的fast不够快
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null){
            return false;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        //if(slow == fast){
        //    return true;
        //}

        while(slow != fast){
                  if(fast != null){
  
            slow = slow.next;
            fast = fast.next;
                  }
            
            if(fast == null){
                return false;
            }
            else fast = fast.next;

            //if(fast.next != null && fast.next == slow){
            //    return true;
            //}
        }
        return true;
    }
}

//2nd round
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null || head.next==null){
            return false;
        }
        ListNode slow=head;
        ListNode fast=head.next;
        while(slow!=fast && fast!=null){
            slow=slow.next;
            if(fast.next!=null){
                fast=fast.next.next;
            }else{
                return false;
            }
        }
        if(slow==fast && fast!=null){
            return true;
        }
        return false;
    }
}
