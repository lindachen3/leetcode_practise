/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
	public class Solution {
	   //错误，作为递归，每层有一个变量表示level，这个变量只能临时 private int level=1;
	    
	    public int depthSum(List<NestedInteger> nestedList) {
            return depthCal(nestedList, 1);
	    }
	    private int depthCal(List<NestedInteger> nestedList, int level){
	        int sum = 0;
	        for(int i=0; i<nestedList.size(); i++){
	            if(nestedList.get(i).isInteger()){
	            	sum+=level*nestedList.get(i).getInteger();
	            } else{
	            	sum+=depthCal(nestedList.get(i).getList(), level+1);
	            }
	        }
	        return sum;	        
	    }
    }
