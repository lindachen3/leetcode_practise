/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    /*
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        if(root==null){
            return result;
        }
        result.add(root.val);
        result.addAll(preorderTraversal(root.left));
        result.addAll(preorderTraversal(root.right));
        return result;
    }
    */
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        if(root==null) return result;
        Stack<TreeNode> temp = new Stack<TreeNode>();
        temp.push(root);
        while(!temp.empty()){
            TreeNode visiting = temp.pop();
            result.add(visiting.val);
            if(visiting.right!=null) temp.push(visiting.right);
            if(visiting.left!=null) temp.push(visiting.left);
        }
        return result;
    }
}

//Approach 2
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new LinkedList<Integer>();
        travel(res, root);
        return res;
    }
    public void travel(List<Integer> res, TreeNode cur){
        if(cur==null) return;
        if(cur!=null)     res.add(cur.val);
        travel(res, cur.left);
        travel(res, cur.right);
    }
}
