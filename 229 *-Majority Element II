//注意：count == 0 是用来判断对应 candidate 的当前存活量，在判断这一步之前，
我们必须确保数组中当前数字不等于 两个 candidate中的任意一个。否则，我们可能会
在 count0!=0 && count1==0 && nums[i]==candidate0 时错误的将 nums[i] 赋值给 candidate1。

public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> res = new ArrayList<Integer>();
        int count1=0;
        int count2=0;
        int majority1=0;
        int majority2=0;
        for(int num:nums){
            
            if(num==majority1){
                count1++;
            }else if(num==majority2){
                count2++;
            }else if(count1==0){
                majority1=num;
                count1++;
            }else if(count2==0){
                majority2=num;
                count2++;
            }else{
                count1--;
                count2--;
            }
        }
        count1=count2=0;
        for(int num:nums){
            if(num==majority1){
                count1++;
            }else if(num==majority2){
                count2++;
            }
        }
        if(count1>nums.length/3) res.add(majority1);
        if(count2>nums.length/3) res.add(majority2);
        return res;
    }
}
