public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        helper(ans, new ArrayList<Integer>(), candidates, target, 0);
        return ans;
    }
    public void helper(List<List<Integer>> ans, List<Integer> templist, int[] candidates, int target, int start){
        if(target==0){
           ans.add(new ArrayList<Integer>(templist)); 
           return;
        }
        if (target < 0) return;
        for(int i=start; i<candidates.length; i++){
            if(i>start && candidates[i]==candidates[i-1]) continue;
            templist.add(candidates[i]);
            helper(ans, templist, candidates, target-candidates[i],i+1);
            templist.remove(templist.size()-1);
        }
    }
}
