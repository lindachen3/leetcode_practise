public class Solution{
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList<Integer>();
        
        if(s==null || s.length()==0||p==null||p.length()==0){
            return result;
        }
      
        int[] hash = new int[256];
        
        for(char c:p.toCharArray()){
            hash[c]++;
        }
        
        int left=0, right=0, count=p.length();
        while(right<s.length()){
            if(hash[s.charAt(right)]>=1){
                count--;
            }
            hash[s.charAt(right)]--;
            right++;
            
            if(count==0){
                result.add(left);
            }
            
            if(right-left==p.length()){
                if(hash[s.charAt(left)]>=0){
                    count++;
                }
                hash[s.charAt(left)]++;
                left++;
            }
        }
        return result;
    }
}
/*

public class Solution {
    private void remove(String s, int i, HashMap<Character, Integer> mymap) {
                if(mymap.containsKey(s.charAt(i))){
                    if(mymap.get(s.charAt(i)) == 1){
                        mymap.remove(s.charAt(i));    
                    }else{
                        mymap.put(s.charAt(i), mymap.get(s.charAt(i))-1);
                    }
                } else { mymap.put(s.charAt(i), -1);}
    }

    private void add(String p, int i, HashMap<Character, Integer> mymap) {
                if(!mymap.containsKey(p.charAt(i))){
                    mymap.put(p.charAt(i),1);
                }           
                else if(mymap.get(p.charAt(i)) == -1){
                        mymap.remove(p.charAt(i));
                }
                else{
                    mymap.put(p.charAt(i),mymap.get(p.charAt(i))+1);
                }
    }
    
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList<Integer>();
        
        if(s==null || s.length()==0){
            return result;
        }
        if(p.length()>s.length()){
            return result;
        }
        int len=p.length();
        HashMap<Character, Integer> mymap = new HashMap<Character, Integer>();
            for(int i=0; i<len; i++){
                add(p, i, mymap);
                remove(s, i, mymap);
            }
    
        for(int j=0; j<s.length()-len; j++){
            if(mymap.isEmpty()){
                result.add(j);
            }
            
            remove(s, j + len, mymap);
            add(s, j, mymap);
        }

            if(mymap.isEmpty()){
                result.add(s.length()-len);
            }
        
        return result;
    } 
}*/
