public class TwoSum {
    HashMap<Integer, Integer> mymap = new HashMap<Integer, Integer>();
    // Add the number to an internal data structure.
	public void add(int number) {
	    if(mymap.containsKey(number)){
	        mymap.put(number,2);
	    }else{
	        mymap.put(number, 1);
	    }
	}

    // Find if there exists any pair of numbers which sum is equal to the value.
	public boolean find(int value) {
	    Iterator<Integer> iter = mymap.keySet().iterator();
	    while(iter.hasNext()){
	        int num1=iter.next();
	        int num2=value-num1;
	        if(mymap.containsKey(num2)){
	            if(num1!=num2||mymap.get(num2)==2)
	                return true;
	        }
	    }
	    return false;
	}
}


// Your TwoSum object will be instantiated and called as such:
// TwoSum twoSum = new TwoSum();
// twoSum.add(number);
// twoSum.find(value);


//2nd round
public class TwoSum {
    HashMap<Integer, Integer> myset;

    /** Initialize your data structure here. */
    public TwoSum() {
        myset = new HashMap<>();
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        if(myset.containsKey(number)){
            myset.put(number, 2);
        }else{
            myset.put(number, 1);
        }
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        for(Integer i:myset.keySet()){
            int res = value-i;
            if(myset.containsKey(res) && res!=i) {
                return true;
            }else if(myset.containsKey(res) && res==i && myset.get(i)==2){
                return true;
            }
        }
        return false;
    }
}

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */
