public class RandomizedSet {
    HashSet<Integer> myset;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        myset = new HashSet<>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(myset.contains(val))
            return false;
        return myset.add(val);
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!myset.contains(val))
            return false;
        return myset.remove(val);
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        Random r = new Random();
        int i = r.nextInt(myset.size());
        ArrayList<Integer> arr = new ArrayList<>();
        for(Integer num:myset){
            arr.add(num);
        }
        return arr.get(i);
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
 
 // O(1) solution
 
 public class RandomizedSet {
    HashMap<Integer, Integer> myset;
    ArrayList<Integer> arr;
    
    /** Initialize your data structure here. */
    public RandomizedSet() {
        myset = new HashMap<>();
        arr = new ArrayList<>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(myset.containsKey(val))
            return false;
        myset.put(val, arr.size());
        arr.add(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!myset.containsKey(val))
            return false;
        
        int loc=myset.get(val);
        if(loc<arr.size()-1){
            arr.set(loc, arr.get(arr.size()-1));
            myset.put(arr.get(arr.size()-1), loc);
        }
        myset.remove(val);
        arr.remove(arr.size()-1);
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        Random r = new Random();
        int i = r.nextInt(arr.size());

        return arr.get(i);
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
