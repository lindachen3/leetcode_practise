/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        //if(headA == null || headB == null){
        //    return null;
        //}
        ListNode tempA = headA;
        ListNode tempB = headB;
        while(tempA != null && tempB != null){
            if(tempA == tempB)
                return tempA;
            else{
                tempA = tempA.next;
                tempB = tempB.next;
            }
            if(tempA == null && tempB == null){
                return null;
            }
            if(tempA == null){
                tempA = headB;
            }
            if(tempB == null){
                tempB = headA;
            }
        }
        return null;
    }
}

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
        ListNode ta=headA;
        ListNode tb=headB;
        while(ta!=tb){
            ta=ta==null?headB:ta.next;
            tb=tb==null?headA:tb.next;
        }
        return tb;
    }
}

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    int lenA = length(headA), lenB = length(headB);
    // move headA and headB to the same start point
    while (lenA > lenB) {
        headA = headA.next;
        lenA--;
    }
    while (lenA < lenB) {
        headB = headB.next;
        lenB--;
    }
    // find the intersection until end
    while (headA != headB) {
        headA = headA.next;
        headB = headB.next;
    }
    return headA;
}

private int length(ListNode node) {
    int length = 0;
    while (node != null) {
        node = node.next;
        length++;
    }
    return length;
}
